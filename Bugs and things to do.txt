	---Quick TODO's---
-remove commented-out code from Spawner.java
-rename "canWool"
-Add more info to F3 debug/info overlay
-Check out what happens if I change the Game scale factor. :P

Note to self: for more little bugs/ideas/concerns, search code for "TODO"
-----------------------------------------------------------------------------------

	####BUGS####
####
Sound effects don't always play when they should; mostly it seems when other sounds should be on at the same time.
####
newly spawned zombies don't go to one health for creative..?
####
new worlds use the current/previous keyboard presets, rather than the default ones, when creating a new world after loading a previous one.
####
Many item names don't fit on the black "active item" bar at the bottom.
####
Spawners emit too many entities per unit time. Make it slower. Should be super quick and easy.
####
Textures for my new placeable obsidian door and wall are a bit broken. I probably just need to check their Resource instances; I bet I put "Stone__" Tiles in there or something... In fact, I'm almost certain that's exactly what I did.
####
wierd unreprodoucable glitch: game screen went all gray for a second after pressing exit to main menu button, but the cancelling, and pressing "r" to save.
#### 

-----------------------------------------------------------------------------------

	****IDEAS(that should probably be implemented)****
****

There's a lot to do in the Tile classes... many methods have many unnecessary parameters... and the torch effects account for all the "light" and "torch" static tiles in Tile.java. I think I'll make a HashMap out of that list, as well.

****

Make a TextPage class or something, for the About and Instructions sections of the TitleMenu; really, it's for pages that are non-interactive, just a bunch of text.
Also, add controls listing somewhere. Probably closely related to the below idea.

****

I have a system in place to save custom key controls, but lack the menu to edit them... I need to get that implemented.
	How about... another menu class, SelectMenu? It will parent all the cursor selection and scrollable menus; I can use it for the new KeymapMenu, and also WorldSelectMenu and InventoryMenu, with scrolling; the other menus won't use the scroll feature, but I can just make a boolean for that, I think.
	For those menus that don't even have a cursor, though, perhaps I could just make it a Menu..? If that doesn't work, I can always make a ChoiceMenu class, super simple, that just displays two choices with no cursor, and listens for enter and escape keypresses.

****

Make the loading system more forgiving, so that if I add a requirement to the save files, the old ones will still work. The idea is that when it expects 5 options and only finds 4, it just keeps those at default.

****

Make window resizable, and menus will be fine.
	I think.... I think a lot of this will simply be changing all the 16's to "scale".
	Well... maybe not. The "16" is a part of rendering; instead, I should probably just make the "pixels" bigger.

****

-----------------------------------------------------------------------------------

*?*?*?* Questionable Improvements (But still seem important)*?*?*?*

remove OptionsMenu from title screen? All the features, besides sound, perhaps, seem like they should be world-specific... well.... actually, they should be *user* specific... but "users" aren't a thing at the moment, so I just assume that different worlds are different users. That probably needs to change... for now, though, I'll just leave it be.

*?*?*?*

Make all Class instance lists similar to ListItems, but static; so, each one has a "get" method accepting a string. Maybe I could make them all extend a "ClassList" or "InstanceList" interface or something...

In a similar/related vein, make each subclass of these store their own lists of their instances, and they will just be added to the main one.
So, for resources, PotionResource would have a static list of all the potion resources, and Resource would just add those to it's collection.

Hmm... Actually, I have a better idea. How about I just instantiate everything in the list classes, but have the sub-classes record each instance? They could be recorded in a HashMap, with a string key for the name, that fetches the associated object instance.

I don't know...

*?*?*?*

