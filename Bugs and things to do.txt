	---Quick TODO's---

- make a fps slider or something.
-reorder tools a bit in ToolType.java b/c I'm picky. Hoes should be first, at least. ;)
- add to F3 menu: "heartticks" left until regen another heart.

Note to self: for more little bugs/ideas/concerns, search code for "TODO"
-----------------------------------------------------------------------------------

	####BUGS####
####
Sound effects don't always play when they should; mostly it seems when other sounds should be on at the same time.
####
it is possible to duplicate items through repeated dropping and picking up.
####

#####
MULTIPLAYER-Related:
 - Players aren't kicked out if they are on a menu when the server goes down..? (only tested/seen once)
 
 It would be nice if I could find a way to not even bother telling the server for things like potions, that don't even interact with the world.
#####
-----------------------------------------------------------------------------------

	****IDEAS(that should probably be implemented)****
****

Add a feature where the player is knocked back when mobs attack them, but not by water or lava. So... well, actually, anything that's self-inflicted, and nothing else. So, hunger, water, and lava, don't knock back, but everthing else should.

****

make the text when typing a world name become uppercase according to English locale.

****

Make spawners break with one hit in creative. ...with any tool?

****

allow creative mode player to walk in sky without clouds.

****

Allow clients to add a port number to the end of the ip with ":". for example: 12.34.145.1:1122

****

Fix menu inheritance stuff. How about I keep Menu.renderItemList() (because it's a great idea) but with some modifications: put it in the InventoryMenu class. Also make that class more flexible, so that it can nicely parent ContainerMenu. How about... it just holds the renderItemList() method? Yeah, and the current inventory list. The thing with ContainerMenu is that the two inv lists are *not* the same; on is active, one is not. So, it just needs to add a reference to the inactive list, and its current index!

****

The Font.drawParagraph() methods' centering system (and/or I suppose the FontStyle centering system) should revolve around three things, for each axis: whether or not to center at all, and if so, the **OFFSET FROM THE ABSOLUTE CENTER**, and the x and y padding. That second one is the one not taken care of in the main drawParagraph method, and I think it would make things a hell of a lot easier.

****

Add more colors? Or try and turn sprites into 32x32 (currently are 16x16) for better graphics? Also, change game aspect ratio from 4:3 to 16:9. This probably means searching for hard-coding refs to the screen size, and changing them. Also make smaller font size, for chat and debug.

****

localization? (Be sure to credit whoever makes any given localization.)

****

PROJECT: encapsulate many classes, as much as possible. This means making preferably zero public fields, and so making more getters and setters... I haven't done that very well...

****

Make the mob package and furniture package - I'm not sure why there were so many errors... There aren't any package-private variables...

****

Add a note that describes how new score mode times can be unlocked. Probably should add them in the tutorial...

****

Make the TileItem instances get their name from the tile they will make. This is so that the tile class can drop that item when it is destroyed, and it doesn't have to know the name of the item; it just has to do Items.get(name).

****

add ability to mark players as ops ("operators") so they can do stuff to the game... but... what exactly can they do, then, anyway? Maybe the game isn't ready for this yet...

****

the server stalls or something when the username is too long; client probably throws error, out of bounds exception.

****

lengthen timout times... Some computers take a fairly long while.... Perhaps I should check the connection speed for a few seconds, and then set timeous based on that? :/

****

It would be really good if I could seperate all the stuff in the Save and Load classes into their respective classes -- I'm not saying remove them altogether, just take the stuff that turns a list of strings into a specific full entity object, and the stuff that brings all the class's important variables and states into a String, and put those parts into the matching class. Then, Load and Save will be there to go through all of them, and get them in a nice list or bigger string, and then write them to a file. Or vice versa for Load, it will read the file and turn it sequentially into entities. Of course, not to mention all the other things besides entities that Load and Save deal with!

So, what will be added to each class is:

  -TO SAVE: a method (getData(), I think), that compiles all the data, necessary to remake the entity, into a string. Maybe have a boolean fullSave or something that determines how much is enough to remake it; some things I may deem unnecessary.

  -TO LOAD: a constructor, I think, with parameters being all the stuff in the save. Oh, actually, no, better idea! It just literally takes the String! Hopefully thing won't be a problem... with Chest.java maybe, but if we make it a string and a boolean, then it should be good.

****

Stop saving player arrow count, and refit the load class indexes to reflect that. I should really find a better way to represent each piece of info in loading, so the removal of one save item doesn't break everything.

****

Make respawn without bed += 20 blocks x/y of last spawn.

****

Go over all the "Warnings" from Xlint, and fix them.

****

My idea for the new tile data system:
Have Tiles.java store an Array list of Arrays, the first one for tile id, and the inner array to represent a data type. I haven't decided what data type the inner array should be; could be int (direct to save file), String (direct to read), or Enum (direct to save and read, but many enums and *might* not work).
To save, maybe I should separate this data from other data like health, and put it directly in the ids file. Maybe put it as id_data, both integers here for sure. And for referencing in tiles.get, same deal: "name_data". This shows just how nice enums would be. I hope they work.

****

Add world backup option, that user can select a download location. Then maybe... pack to zip? Also, I'll need to make a "restore" feature, and unzip it, so this could get complicated...

****

-----------------------------------------------------------------------------------

*?*?*?* Questionable Improvements (But still seem important)*?*?*?*

LegacyLoad class is becoming annoying to handle; it should be reimplemented so that it won't have to be changed at all to reflect future updates. This could be done by making it only return values, and not actually reference any current variables. This may prove overcomplicated, though.

IDEA: Let's make an "Update.java" file, maybe multiple, that handle different versions. However, instead of setting values in the rest of the game files, it will be set up as a "getter" sort of thing, where it doesn't reference all the game vars in full detail; but, it fetches them in the way that needs to be, for the main Load class. Basically, I want to have Load.java run everytime, but all the things that would otherwise be copied to LegacyLoad just stay in Load.java, and Load.java will "call" certain methods of LegacyLoad, to setup something the way it used to be.
Yeah, it's fishy, but.... there we go.

*?*?*?*
