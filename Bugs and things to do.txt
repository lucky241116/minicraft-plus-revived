	---Quick TODO's---

-- check that I made sure to include player's activeItem in save when making the world multiplayer
-reorder tools a bit in ToolType.java b/c I'm picky. Hoes should be first, at least. ;)
- add to F3 menu: "heartticks" left until regen another heart.
- Move Mobs into Mob package, and furniture into furniture package.

Note to self: for more little bugs/ideas/concerns, search code for "TODO"
-----------------------------------------------------------------------------------

	####BUGS####
####
10 minute mode unlock is not written to file when it should.
####
You don't spawn next to your bed after you sleep in it, and then die.
####
Don't let creepers blow up stairs.
####
Stairs clump together.
####
REQUEST: stone drops too much coal.
####
Fire particles appear, but... they look totally weird...
####
Sound effects don't always play when they should; mostly it seems when other sounds should be on at the same time.
####
REQUEST: remove POW glove, and other starting items
####

#####
MULTIPLAYER-Related:
 # Tile and entity updates sometimes don't get reached, resulting in the wrong tile displayed, or a frozen entity. Happens rather often...
 # have not tested stairs.
 # picking furniture up doesn't work very well, at least previously.
 # Beds are untested.
 # Player animations don't work.
 # potion effects probably won't appear for the clients, but I'm pretty sure they'll still exist. Basically, they are not synced to the client. Though, it would be nice if I could find a way to not even bother telling the server for things like potions, that don't even interact with the world.
 # chests don't work, probably.
#####
-----------------------------------------------------------------------------------

	****IDEAS(that should probably be implemented)****
****

It would be really good if I could seperate all the stuff in the Save and Load classes into their respective classes -- I'm not saying remove them altogether, just take the stuff that turns a list of strings into a specific full entity object, and the stuff that brings all the class's important variables and states into a String, and put those parts into the matching class. Then, Load and Save will be there to go through all of them, and get them in a nice list or bigger string, and then write them to a file. Or vice versa for Load, it will read the file and turn it sequentially into entities. Of course, not to mention all the other things besides entities that Load and Save deal with!

So, what will be added to each class is:

  -TO SAVE: a method (getData(), I think), that compiles all the data, necessary to remake the entity, into a string. Maybe have a boolean fullSave or something that determines how much is enough to remake it; some things I may deem unnecessary.

  -TO LOAD: a constructor, I think, with parameters being all the stuff in the save. Oh, actually, no, better idea! It just literally takes the String! Hopefully thing won't be a problem... with Chest.java maybe, but if we make it a string and a boolean, then it should be good.

****

REQUEST: Make TNT do chain explosions.

****

Stop saving player arrow count, and refit the load class indexes to reflect that. I should really find a better way to represent each piece of info in loading, so the removal of one save item doesn't break everything.

****

Make it so player usernames must be unique.

****

Add world backup option to world load menu; it could be complicated, since if I add a world backup option, I would have to add a world restore option, too...

****

Make respawn without bed += 20 blocks x/y of last spawn.

****

Go over all the "Warnings" from Xlint, and fix them.

****

My idea for the new tile data system:
Have Tiles.java store an Array list of Arrays, the first one for tile id, and the inner array to represent a data type. I haven't decided what data type the inner array should be; could be int (direct to save file), String (direct to read), or Enum (direct to save and read, but many enums and *might* not work).
To save, maybe I should separate this data from other data like health, and put it directly in the ids file. Maybe put it as id_data, both integers here for sure. And for referencing in tiles.get, same deal: "name_data". This shows just how nice enums would be. I hope they work.

****

Add world backup option, that user can select a download location. Then maybe... pack to zip? Also, I'll need to make a "restore" feature, and unzip it ...

****

change inventory system to better allow moving items to and from inventories, into chests; for example, you should be able to choose how much of an item stack you want to transfer.

****

-----------------------------------------------------------------------------------

*?*?*?* Questionable Improvements (But still seem important)*?*?*?*

LegacyLoad class is becoming annoying to handle; it should be reimplemented so that it won't have to be changed at all to reflect future updates. This could be done by making it only return values, and not actually reference any current variables. This may prove overcomplicated, though.

IDEA: Let's make an "Update.java" file, maybe multiple, that handle different versions. However, instead of setting values in the rest of the game files, it will be set up as a "getter" sort of thing, where it doesn't reference all the game vars in full detail; but, it fetches them in the way that needs to be, for the main Load class. Basically, I want to have Load.java run everytime, but all the things that would otherwise be copied to LegacyLoad just stay in Load.java, and Load.java will "call" certain methods of LegacyLoad, to setup something the way it used to be.
Yeah, it's fishy, but.... there we go.

*?*?*?*
