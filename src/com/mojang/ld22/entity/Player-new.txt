package com.mojang.ld22.entity;

import com.mojang.ld22.Game;
import com.mojang.ld22.InputHandler;
import com.mojang.ld22.crafting.Crafting;
import com.mojang.ld22.entity.Arrow;
import com.mojang.ld22.entity.Chest;
import com.mojang.ld22.entity.Entity;
import com.mojang.ld22.entity.Furniture;
import com.mojang.ld22.entity.Inventory;
import com.mojang.ld22.entity.ItemEntity;
import com.mojang.ld22.entity.Mob;
import com.mojang.ld22.entity.bed;
import com.mojang.ld22.entity.particle.TextParticle;
import com.mojang.ld22.gfx.Color;
import com.mojang.ld22.gfx.Screen;
import com.mojang.ld22.item.FurnitureItem;
import com.mojang.ld22.item.Item;
import com.mojang.ld22.item.ListItems;
import com.mojang.ld22.item.PowerGloveItem;
import com.mojang.ld22.item.ToolItem;
import com.mojang.ld22.item.ToolType;
import com.mojang.ld22.level.Level;
import com.mojang.ld22.level.tile.Tile;
import com.mojang.ld22.saveload.Save;
import com.mojang.ld22.screen.CraftInvMenu;
import com.mojang.ld22.screen.HomeMenu;
import com.mojang.ld22.screen.InfoMenu;
import com.mojang.ld22.screen.InventoryMenu;
import com.mojang.ld22.screen.LevelTransitionMenu;
import com.mojang.ld22.screen.LoadingMenu;
import com.mojang.ld22.screen.ModeMenu;
import com.mojang.ld22.screen.PauseMenu;
import com.mojang.ld22.screen.PlayerInfoMenu;
import com.mojang.ld22.screen.StartMenu;
import com.mojang.ld22.screen.WorldSelectMenu;
import com.mojang.ld22.sound.Sound;
import java.util.ArrayList;
import java.util.List;

public class Player extends Mob {

	private InputHandler input;
	public int attackTime;
	public int attackDir;
	public boolean energy = false;
	public Game game;
	public Inventory inventory = new Inventory(this);
	public static Inventory Sinventory;
	public Item attackItem;
	public Item activeItem;
	public int stamina;
	public int staminaRecharge;
	public int staminaRechargeDelay;
	public static int score;
	public int maxStamina = 10;
	public int maxArmor = 0;
	public int maxHunger = 10;
	public int hunger;
	public int homeSetX;
	public int homeSetY;
	public static int SHealth = 10;
	public static int SHunger = 10;
	public static boolean hasSetHome;
	public static boolean canSetHome;
	public static boolean canGoHome;
	public static boolean sentFromSetHome;
	public static boolean sentFromHome;
	public static int spawnx = 0;
	public static int spawny = 0;
	private int onStairDelay;
	int tickCounter = 0;
	int hungerChargeDelay;
	int hungerStarveDelay;
	public int hungStamCnt;
	int timesTick;
	public int stepCount;
	boolean alreadyLostHunger;
	boolean repeatHungerCyc = false;
	public int px;
	public int py;
	public int invulnerableTime;
	public static int xx;
	public static int yy;
	public boolean bedSpawn;
	/*public double speed;
	public double light;
	public boolean infswim;
	public boolean infstamina;
	public boolean regen;
	public boolean slowtime;
	public boolean lavaimmune;
	public boolean shield;
	public boolean haste;
	public List potioneffects;
	public List potioneffectstime;
	*/public boolean showinfo;
	//public boolean showpotioneffects;
	public int r;
	public int g;
	public int b;
	int cooldowninfo;
	int regentick;


	public Player(Game game, InputHandler input) {
		px = x;
		py = y;
		invulnerableTime = 0;
		/*speed = 1.0D;
		light = 1.0D;
		infswim = false;
		infstamina = false;
		regen = false;
		slowtime = false;
		lavaimmune = false;
		shield = false;
		haste = false;
		potioneffects = new ArrayList();
		potioneffectstime = new ArrayList();
		*/showinfo = false;
		//showpotioneffects = true;
		r = 50;
		g = 50;
		cooldowninfo = 0;
		regentick = 0;
		this.game = game;
		this.input = input;
		x = 24;
		y = 24;
		game.nsPerTick = 1.6666666666666666E7D;
		stamina = maxStamina;
		hunger = maxHunger;
		inventory.items.clear();
		if(ModeMenu.creative) {
			for(int i = 0; i < ListItems.items.size(); ++i) {
				inventory.add((Item)ListItems.items.get(i));
			}
		} else if(!ModeMenu.creative) {
			inventory.add(new PowerGloveItem());
		}

	}

	public void tick() {
		super.tick();
		isenemy = false;
		++tickCounter;
		if(level.getTile(x / 16, y / 16) == Tile.infiniteFall && !StartMenu.skinon) {
			game.setMenu(new LevelTransitionMenu(-1));
		}

		if(cooldowninfo > 0) {
			--cooldowninfo;
		}

		int xa;
		if(potioneffectstime.size() > 0 && !bed.hasBedSet) {
			for(int onTile = 0; onTile < potioneffectstime.size(); ++onTile) {
				xa = ((Integer)potioneffectstime.get(onTile)).intValue();
				--xa;
				potioneffectstime.set(onTile, Integer.valueOf(xa));
				if(((String)potioneffects.get(onTile)).contains("Light") && light != 2.5D) {
					light = 2.5D;
				}

				if(((String)potioneffects.get(onTile)).contains("Speed") && speed != 2.0D) {
					speed = 2.0D;
				}

				if(((String)potioneffects.get(onTile)).contains("Swim") && !infswim) {
					infswim = true;
				}

				if(((String)potioneffects.get(onTile)).contains("Energy") && !infstamina) {
					infstamina = true;
				}

				if(((String)potioneffects.get(onTile)).contains("Regen") && !regen) {
					regen = true;
				}

				if(((String)potioneffects.get(onTile)).contains("Time") && !slowtime) {
					slowtime = true;
					game.nsPerTick = 3.3333333333333332E7D;
				}

				if(((String)potioneffects.get(onTile)).contains("Lava") && !lavaimmune) {
					lavaimmune = true;
				}

				if(((String)potioneffects.get(onTile)).contains("Shield") && !shield) {
					shield = true;
				}

				if(((String)potioneffects.get(onTile)).contains("Haste") && !haste) {
					haste = true;
				}

				if(xa == 0) {
					if(((String)potioneffects.get(onTile)).contains("Speed")) {
						speed = 1.0D;
					}

					if(((String)potioneffects.get(onTile)).contains("Light")) {
						light = 1.0D;
					}

					if(((String)potioneffects.get(onTile)).contains("Swim")) {
						infswim = false;
					}

					if(((String)potioneffects.get(onTile)).contains("Energy")) {
						infstamina = false;
					}

					if(((String)potioneffects.get(onTile)).contains("Regen")) {
						regen = false;
					}

					if(((String)potioneffects.get(onTile)).contains("Time")) {
						slowtime = false;
						game.nsPerTick = 1.6666666666666666E7D;
					}

					if(((String)potioneffects.get(onTile)).contains("Lava")) {
						lavaimmune = false;
					}

					if(((String)potioneffects.get(onTile)).contains("Shield")) {
						shield = false;
					}

					if(((String)potioneffects.get(onTile)).contains("Haste")) {
						haste = false;
					}

					potioneffectstime.remove(onTile);
					potioneffects.remove(onTile);
				}
			}
		}

		if(input.f3.clicked && cooldowninfo == 0) {
			if(showinfo) {
				cooldowninfo = 10;
				showinfo = false;
			} else {
				cooldowninfo = 10;
				showinfo = true;
			}
		}

		if(input.f2.clicked && cooldowninfo == 0) {
			if(showpotioneffects) {
				cooldowninfo = 10;
				showpotioneffects = false;
			} else {
				cooldowninfo = 10;
				showpotioneffects = true;
			}
		}

		if(invulnerableTime > 0) {
			--invulnerableTime;
		}

		Tile var4 = level.getTile(x >> 4, y >> 4);
		if(var4 != Tile.stairsDown && var4 != Tile.stairsUp && var4 != Tile.lightstairsDown && var4 != Tile.lightstairsUp) {
			if(onStairDelay > 0) {
				--onStairDelay;
			}
		} else {
			if(onStairDelay == 0) {
				changeLevel(var4 != Tile.stairsUp && var4 != Tile.lightstairsUp?-1:1);
				onStairDelay = 10;
				return;
			}

			onStairDelay = 10;
		}

		if(ModeMenu.creative && stamina <= 10) {
			stamina = 10;
		}

		if(ModeMenu.creative && hunger < 10) {
			hunger = 10;
		}

		if(hunger < 0) {
			hunger = 0;
		} else {
			if(stamina <= 0 && staminaRechargeDelay == 0 && staminaRecharge == 0) {
				staminaRechargeDelay = 40;
				++hungStamCnt;
				if(StartMenu.diff == StartMenu.easy && hungStamCnt == 10) {
					--hunger;
					hungStamCnt = 0;
				}

				if(StartMenu.diff == StartMenu.norm && hungStamCnt == 7) {
					--hunger;
					hungStamCnt = 0;
				}

				if(StartMenu.diff == StartMenu.hard && hungStamCnt == 5) {
					--hunger;
					hungStamCnt = 0;
				}
			}

			if(staminaRechargeDelay > 0) {
				--staminaRechargeDelay;
			}

			if(staminaRechargeDelay == 0) {
				++staminaRecharge;
				if(isSwimming() && !infswim) {
					staminaRecharge = 0;
				}

				if(!slowtime) {
					while(staminaRecharge > 10) {
						staminaRecharge -= 10;
						if(stamina < maxStamina) {
							++stamina;
						}
					}
				} else {
					while(staminaRecharge > 5) {
						staminaRecharge -= 5;
						if(stamina < maxStamina) {
							++stamina;
						}
					}
				}
			}
		}

		if(hungerChargeDelay == 0) {
			hungerChargeDelay = 100;
		}

		if(hunger == 10 && health < 10) {
			if(hungerChargeDelay > 0) {
				--hungerChargeDelay;
			}

			if(hungerChargeDelay == 0) {
				++health;
			}
		}

		if(hungerStarveDelay == 0) {
			hungerStarveDelay = 120;
		}

		if(StartMenu.diff == StartMenu.norm && stepCount >= 10000) {
			--hunger;
			stepCount = 0;
		}

		if(StartMenu.diff == StartMenu.hard && stepCount >= 5000) {
			--hunger;
			stepCount = 0;
		}

		if(StartMenu.diff == StartMenu.norm && Game.tickCount == 6000) {
			++timesTick;
			if(timesTick == random.nextInt(5)) {
				--hunger;
			}
		}

		if(StartMenu.diff == StartMenu.hard && Game.tickCount == 6000) {
			++timesTick;
			if(timesTick == random.nextInt(2)) {
				--hunger;
			}
		}

		if(StartMenu.diff == StartMenu.easy && hunger == 0 && health > 5) {
			if(hungerStarveDelay > 0) {
				--hungerStarveDelay;
			}

			if(hungerStarveDelay == 0) {
				hurt(this, 1, attackDir);
			}
		}

		if(StartMenu.diff == StartMenu.norm && hunger == 0 && health > 3) {
			if(hungerStarveDelay > 0) {
				--hungerStarveDelay;
			}

			if(hungerStarveDelay == 0) {
				hurt(this, 1, attackDir);
			}
		}

		if(StartMenu.diff == StartMenu.hard && hunger == 0 && health > 0) {
			if(hungerStarveDelay > 0) {
				--hungerStarveDelay;
			}

			if(hungerStarveDelay == 0) {
				hurt(this, 1, attackDir);
			}
		}

		xa = 0;
		int ya = 0;
		if(!Game.isfishing) {
			if(input.up.down) {
				--ya;
				++stepCount;
			}

			if(input.down.down) {
				++ya;
				++stepCount;
			}

			if(input.left.down) {
				--xa;
				++stepCount;
			}

			if(input.right.down) {
				++xa;
				++stepCount;
			}
		}

		xx = x;
		yy = y;
		if(isSwimming() && tickTime % 60 == 0 && !infswim) {
			if(stamina > 0) {
				--stamina;
			} else {
				hurt(this, 1, dir ^ 1);
			}
		}

		if(game.saving && game.savecooldown > 0) {
			xa = 0;
			ya = 0;
		}

		if(regen) {
			++regentick;
			if(regentick > 60) {
				regentick = 0;
				if(health < 10) {
					++health;
				}
			}
		}

		if(game.savecooldown > 0 && !game.saving) {
			--game.savecooldown;
		}

		if(staminaRechargeDelay % 2 == 0 && game.savecooldown == 0 && !game.saving) {
			if(!slowtime) {
				move((int)((double)xa * speed), (int)((double)ya * speed));
			} else {
				move((int)((double)xa * speed) * 2, (int)((double)ya * speed) * 2);
			}
		}

		if(input.attack.clicked && stamina != 0) {
			if(!infstamina) {
				--stamina;
			}

			staminaRecharge = 0;
			attack();
		}

		if(input.menu.clicked && !use()) {
			game.setMenu(new InventoryMenu(this));
		}

		if(input.pause.clicked) {
			game.setMenu(new PauseMenu(this));
		}

		if(input.craft.clicked && !use()) {
			game.setMenu(new CraftInvMenu(Crafting.craftRecipes, this));
		}

		if(input.sethome.clicked) {
			setHome();
		}

		if(input.home.clicked) {
			goHome();
		}

		if(input.i.clicked) {
			game.setMenu(new PlayerInfoMenu());
		}

		if(input.r.clicked && !game.saving) {
			game.saving = true;
			new Save(this, WorldSelectMenu.worldname);
			LoadingMenu.percentage = 0;
		}

		boolean var10000 = input.g.clicked;
		var10000 = input.y.clicked;
		if(ModeMenu.creative && input.dayTime.clicked) {
			Game.tickCount = 5900;
		}

		if(attackTime > 0) {
			--attackTime;
		}

		if(slowtime && !bed.hasBedSet) {
			game.nsPerTick = 3.3333333333333332E7D;
		}

	}

	private boolean use() {
		byte yo = -2;
		if(dir == 0 && use(x - 8, y + 4 + yo, x + 8, y + 12 + yo)) {
			return true;
		} else if(dir == 1 && use(x - 8, y - 12 + yo, x + 8, y - 4 + yo)) {
			return true;
		} else if(dir == 3 && use(x + 4, y - 8 + yo, x + 12, y + 8 + yo)) {
			return true;
		} else if(dir == 2 && use(x - 12, y - 8 + yo, x - 4, y + 8 + yo)) {
			return true;
		} else {
			int xt = x >> 4;
			int yt = y + yo >> 4;
			byte r = 12;
			if(attackDir == 0) {
				yt = y + r + yo >> 4;
			}

			if(attackDir == 1) {
				yt = y - r + yo >> 4;
			}

			if(attackDir == 2) {
				xt = x - r >> 4;
			}

			if(attackDir == 3) {
				xt = x + r >> 4;
			}

			return xt >= 0 && yt >= 0 && xt < level.w && yt < level.h && level.getTile(xt, yt).use(level, xt, yt, this, attackDir);
		}
	}

	private void attack() {
		walkDist += 8;
		attackDir = dir;
		attackItem = activeItem;
		boolean done = false;
		if(attackItem instanceof ToolItem && stamina - 1 >= 0) {
			ToolItem yo = (ToolItem)attackItem;
			if(Game.ac > 0 && yo.type == ToolType.bow && stamina - 1 >= 0) {
				if(!energy) {
					stamina -= 0;
				}

				switch(attackDir) {
				case 0:
					level.add(new Arrow(this, 0, 1, yo.level, done));
					if(!ModeMenu.creative) {
						--Game.ac;
					}
					break;
				case 1:
					level.add(new Arrow(this, 0, -1, yo.level, done));
					if(!ModeMenu.creative) {
						--Game.ac;
					}
					break;
				case 2:
					level.add(new Arrow(this, -1, 0, yo.level, done));
					if(!ModeMenu.creative) {
						--Game.ac;
					}
					break;
				case 3:
					level.add(new Arrow(this, 1, 0, yo.level, done));
					if(!ModeMenu.creative) {
						--Game.ac;
					}
				}

				done = true;
			}
		}

		byte range;
		int xt;
		int yt;
		byte r;
		byte var7;
		if(activeItem != null) {
			attackTime = 10;
			var7 = -2;
			range = 12;
			if(dir == 0 && interact(x - 8, y + 4 + var7, x + 8, y + range + var7)) {
				done = true;
			}

			if(dir == 1 && interact(x - 8, y - range + var7, x + 8, y - 4 + var7)) {
				done = true;
			}

			if(dir == 3 && interact(x + 4, y - 8 + var7, x + range, y + 8 + var7)) {
				done = true;
			}

			if(dir == 2 && interact(x - range, y - 8 + var7, x - 4, y + 8 + var7)) {
				done = true;
			}

			if(done) {
				return;
			}

			xt = x >> 4;
			yt = y + var7 >> 4;
			r = 12;
			if(attackDir == 0) {
				yt = y + r + var7 >> 4;
			}

			if(attackDir == 1) {
				yt = y - r + var7 >> 4;
			}

			if(attackDir == 2) {
				xt = x - r >> 4;
			}

			if(attackDir == 3) {
				xt = x + r >> 4;
			}

			if(xt >= 0 && yt >= 0 && xt < level.w && yt < level.h) {
				if(activeItem.interactOn(level.getTile(xt, yt), level, xt, yt, this, attackDir)) {
					done = true;
				} else if(level.getTile(xt, yt).interact(level, xt, yt, this, activeItem, attackDir)) {
					done = true;
				}

				if(activeItem.isDepleted()) {
					activeItem = null;
				}
			}
		}

		if(!done) {
			if(activeItem == null || activeItem.canAttack()) {
				attackTime = 5;
				var7 = -2;
				range = 20;
				if(dir == 0) {
					hurt(x - 8, y + 4 + var7, x + 8, y + range + var7);
				}

				if(dir == 1) {
					hurt(x - 8, y - range + var7, x + 8, y - 4 + var7);
				}

				if(dir == 3) {
					hurt(x + 4, y - 8 + var7, x + range, y + 8 + var7);
				}

				if(dir == 2) {
					hurt(x - range, y - 8 + var7, x - 4, y + 8 + var7);
				}

				xt = x >> 4;
				yt = y + var7 >> 4;
				r = 12;
				if(attackDir == 0) {
					yt = y + r + var7 >> 4;
				}

				if(attackDir == 1) {
					yt = y - r + var7 >> 4;
				}

				if(attackDir == 2) {
					xt = x - r >> 4;
				}

				if(attackDir == 3) {
					xt = x + r >> 4;
				}

				if(xt >= 0 && yt >= 0 && xt < level.w && yt < level.h) {
					level.getTile(xt, yt).hurt(level, xt, yt, this, random.nextInt(3) + 1, attackDir);
				}
			}

		}
	}

	private boolean use(int x0, int y0, int x1, int y1) {
		List entities = level.getEntities(x0, y0, x1, y1);

		for(int i = 0; i < entities.size(); ++i) {
			Entity e = (Entity)entities.get(i);
			if(e != this && e.use(this, attackDir)) {
				return true;
			}
		}

		return false;
	}

	private boolean interact(int x0, int y0, int x1, int y1) {
		List entities = level.getEntities(x0, y0, x1, y1);

		for(int i = 0; i < entities.size(); ++i) {
			Entity e = (Entity)entities.get(i);
			if(e != this && e.interact(this, activeItem, attackDir)) {
				return true;
			}
		}

		return false;
	}

	private void hurt(int x0, int y0, int x1, int y1) {
		List entities = level.getEntities(x0, y0, x1, y1);

		for(int i = 0; i < entities.size(); ++i) {
			Entity e = (Entity)entities.get(i);
			if(e != this) {
				e.hurt((Mob)this, getAttackDamage(e), attackDir);
			}
		}

	}

	private int getAttackDamage(Entity e) {
		int dmg = random.nextInt(3) + 1;
		if(attackItem != null) {
			dmg += attackItem.getAttackDamageBonus(e);
		}

		return dmg;
	}

	public void render(Screen screen) {
		col0 = Color.get(-1, 100, Color.rgb(r, g, b), 531);
		col1 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
		int r2 = r - 50;
		int b2 = b - 50;
		int g2 = g - 50;
		if(r == 50 && g == 50 && b == 0) {
			r2 = 50;
			g2 = 50;
			b2 = 0;
		}

		if(r == 50 && g == 50 && b == 50) {
			r2 = 50;
			g2 = 50;
			b2 = 50;
		}

		if(r2 < 0) {
			r2 = 0;
		}

		if(b2 < 0) {
			b2 = 0;
		}

		if(g2 < 0) {
			g2 = 0;
		}

		col2 = Color.get(-1, 100, Color.rgb(r2, g2, b2), 421);
		col3 = Color.get(-1, 0, Color.rgb(r2, g2, b2), 321);
		col4 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
		if(isLight()) {
			col0 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
			col1 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
			col2 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
			col3 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
			col4 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
		} else {
			col0 = Color.get(-1, 100, Color.rgb(r, g, b), 531);
			col1 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
			col2 = Color.get(-1, 100, Color.rgb(r2, g2, b2), 421);
			col3 = Color.get(-1, 0, Color.rgb(r2, g2, b2), 321);
			col4 = Color.get(-1, 100, Color.rgb(r, g, b), 532);
		}

		int xt = 0;
		int yt = 14;
		if(StartMenu.skinon) {
			xt = 18;
			yt = 20;
		}

		int flip1 = walkDist >> 3 & 1;
		int flip2 = walkDist >> 3 & 1;
		if(dir == 1) {
			xt += 2;
		}

		if(dir > 1) {
			flip1 = 0;
			flip2 = walkDist >> 4 & 1;
			if(dir == 2) {
				flip1 = 1;
			}

			xt += 4 + (walkDist >> 3 & 1) * 2;
		}

		int xo = x - 8;
		int yo = y - 11;
		int col;
		if(isSwimming()) {
			yo += 4;
			col = Color.get(-1, -1, 115, 335);
			if(level.getTile(x / 16, y / 16) == Tile.water) {
				col = Color.get(-1, -1, 115, 335);
				if(tickTime / 8 % 2 == 0) {
					col = Color.get(-1, 335, 5, 115);
				}
			} else if(level.getTile(x / 16, y / 16) == Tile.lava) {
				col = Color.get(-1, -1, 500, 300);
				if(tickTime / 8 % 2 == 0) {
					col = Color.get(-1, 300, 400, 500);
				}
			}

			screen.render(xo + 0, yo + 3, 421, col, 0);
			screen.render(xo + 8, yo + 3, 421, col, 1);
		}

		if(attackTime > 0 && attackDir == 1) {
			screen.render(xo + 0, yo - 4, 422, Color.get(-1, 555, 555, 555), 0);
			screen.render(xo + 8, yo - 4, 422, Color.get(-1, 555, 555, 555), 1);
			if(attackItem != null) {
				attackItem.renderIcon(screen, xo + 4, yo - 4);
			}
		}

		Furniture furniture;
		if(level.dirtColor == 322) {
			if(Game.Time == 0) {
				col = col0;
				if(hurtTime > 0) {
					col = Color.get(-1, 555, 555, 555);
				}

				if(activeItem instanceof FurnitureItem) {
					yt += 2;
				}

				screen.render(xo + 8 * flip1, yo + 0, xt + yt * 32, col, flip1);
				screen.render(xo + 8 - 8 * flip1, yo + 0, xt + 1 + yt * 32, col, flip1);
				if(!isSwimming()) {
					screen.render(xo + 8 * flip2, yo + 8, xt + (yt + 1) * 32, col, flip2);
					screen.render(xo + 8 - 8 * flip2, yo + 8, xt + 1 + (yt + 1) * 32, col, flip2);
				}

				if(attackTime > 0 && attackDir == 2) {
					screen.render(xo - 4, yo, 423, Color.get(-1, 555, 555, 555), 1);
					screen.render(xo - 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo - 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 3) {
					screen.render(xo + 8 + 4, yo, 423, Color.get(-1, 555, 555, 555), 0);
					screen.render(xo + 8 + 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 2);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 8 + 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 0) {
					screen.render(xo + 0, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 2);
					screen.render(xo + 8, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 4, yo + 8 + 4);
					}
				}

				if(activeItem instanceof FurnitureItem) {
					furniture = ((FurnitureItem)activeItem).furniture;
					furniture.x = x;
					furniture.y = yo;
					furniture.render(screen);
				}
			}

			if(Game.Time == 1) {
				col = col1;
				if(hurtTime > 0) {
					col = Color.get(-1, 555, 555, 555);
				}

				if(activeItem instanceof FurnitureItem) {
					yt += 2;
				}

				screen.render(xo + 8 * flip1, yo + 0, xt + yt * 32, col, flip1);
				screen.render(xo + 8 - 8 * flip1, yo + 0, xt + 1 + yt * 32, col, flip1);
				if(!isSwimming()) {
					screen.render(xo + 8 * flip2, yo + 8, xt + (yt + 1) * 32, col, flip2);
					screen.render(xo + 8 - 8 * flip2, yo + 8, xt + 1 + (yt + 1) * 32, col, flip2);
				}

				if(attackTime > 0 && attackDir == 2) {
					screen.render(xo - 4, yo, 423, Color.get(-1, 555, 555, 555), 1);
					screen.render(xo - 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo - 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 3) {
					screen.render(xo + 8 + 4, yo, 423, Color.get(-1, 555, 555, 555), 0);
					screen.render(xo + 8 + 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 2);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 8 + 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 0) {
					screen.render(xo + 0, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 2);
					screen.render(xo + 8, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 4, yo + 8 + 4);
					}
				}

				if(activeItem instanceof FurnitureItem) {
					furniture = ((FurnitureItem)activeItem).furniture;
					furniture.x = x;
					furniture.y = yo;
					furniture.render(screen);
				}
			}

			if(Game.Time == 2) {
				col = col2;
				if(hurtTime > 0) {
					col = Color.get(-1, 555, 555, 555);
				}

				if(activeItem instanceof FurnitureItem) {
					yt += 2;
				}

				screen.render(xo + 8 * flip1, yo + 0, xt + yt * 32, col, flip1);
				screen.render(xo + 8 - 8 * flip1, yo + 0, xt + 1 + yt * 32, col, flip1);
				if(!isSwimming()) {
					screen.render(xo + 8 * flip2, yo + 8, xt + (yt + 1) * 32, col, flip2);
					screen.render(xo + 8 - 8 * flip2, yo + 8, xt + 1 + (yt + 1) * 32, col, flip2);
				}

				if(attackTime > 0 && attackDir == 2) {
					screen.render(xo - 4, yo, 423, Color.get(-1, 555, 555, 555), 1);
					screen.render(xo - 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo - 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 3) {
					screen.render(xo + 8 + 4, yo, 423, Color.get(-1, 555, 555, 555), 0);
					screen.render(xo + 8 + 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 2);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 8 + 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 0) {
					screen.render(xo + 0, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 2);
					screen.render(xo + 8, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 4, yo + 8 + 4);
					}
				}

				if(activeItem instanceof FurnitureItem) {
					furniture = ((FurnitureItem)activeItem).furniture;
					furniture.x = x;
					furniture.y = yo;
					furniture.render(screen);
				}
			}

			if(Game.Time == 3) {
				col = col3;
				if(hurtTime > 0) {
					col = Color.get(-1, 555, 555, 555);
				}

				if(activeItem instanceof FurnitureItem) {
					yt += 2;
				}

				screen.render(xo + 8 * flip1, yo + 0, xt + yt * 32, col, flip1);
				screen.render(xo + 8 - 8 * flip1, yo + 0, xt + 1 + yt * 32, col, flip1);
				if(!isSwimming()) {
					screen.render(xo + 8 * flip2, yo + 8, xt + (yt + 1) * 32, col, flip2);
					screen.render(xo + 8 - 8 * flip2, yo + 8, xt + 1 + (yt + 1) * 32, col, flip2);
				}

				if(attackTime > 0 && attackDir == 2) {
					screen.render(xo - 4, yo, 423, Color.get(-1, 555, 555, 555), 1);
					screen.render(xo - 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo - 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 3) {
					screen.render(xo + 8 + 4, yo, 423, Color.get(-1, 555, 555, 555), 0);
					screen.render(xo + 8 + 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 2);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 8 + 4, yo + 4);
					}
				}

				if(attackTime > 0 && attackDir == 0) {
					screen.render(xo + 0, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 2);
					screen.render(xo + 8, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 3);
					if(attackItem != null) {
						attackItem.renderIcon(screen, xo + 4, yo + 8 + 4);
					}
				}

				if(activeItem instanceof FurnitureItem) {
					furniture = ((FurnitureItem)activeItem).furniture;
					furniture.x = x;
					furniture.y = yo;
					furniture.render(screen);
				}
			}
		}

		if(level.dirtColor != 322) {
			col = col4;
			if(hurtTime > 0) {
				col = Color.get(-1, 555, 555, 555);
			}

			if(activeItem instanceof FurnitureItem) {
				yt += 2;
			}

			screen.render(xo + 8 * flip1, yo + 0, xt + yt * 32, col, flip1);
			screen.render(xo + 8 - 8 * flip1, yo + 0, xt + 1 + yt * 32, col, flip1);
			if(!isSwimming()) {
				screen.render(xo + 8 * flip2, yo + 8, xt + (yt + 1) * 32, col, flip2);
				screen.render(xo + 8 - 8 * flip2, yo + 8, xt + 1 + (yt + 1) * 32, col, flip2);
			}

			if(attackTime > 0 && attackDir == 2) {
				screen.render(xo - 4, yo, 423, Color.get(-1, 555, 555, 555), 1);
				screen.render(xo - 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 3);
				if(attackItem != null) {
					attackItem.renderIcon(screen, xo - 4, yo + 4);
				}
			}

			if(attackTime > 0 && attackDir == 3) {
				screen.render(xo + 8 + 4, yo, 423, Color.get(-1, 555, 555, 555), 0);
				screen.render(xo + 8 + 4, yo + 8, 423, Color.get(-1, 555, 555, 555), 2);
				if(attackItem != null) {
					attackItem.renderIcon(screen, xo + 8 + 4, yo + 4);
				}
			}

			if(attackTime > 0 && attackDir == 0) {
				screen.render(xo + 0, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 2);
				screen.render(xo + 8, yo + 8 + 4, 422, Color.get(-1, 555, 555, 555), 3);
				if(attackItem != null) {
					attackItem.renderIcon(screen, xo + 4, yo + 8 + 4);
				}
			}

			if(activeItem instanceof FurnitureItem) {
				furniture = ((FurnitureItem)activeItem).furniture;
				furniture.x = x;
				furniture.y = yo;
				furniture.render(screen);
			}
		}

	}

	public void touchItem(ItemEntity itemEntity) {
		itemEntity.take(this);
		if(itemEntity.item.getName() == "arrow") {
			++Game.ac;
		} else {
			inventory.add(itemEntity.item);
		}

	}

	public boolean canSwim() {
		return true;
	}

	public boolean canWool() {
		return true;
	}

	public boolean canLight() {
		return true;
	}

	public boolean findStartPoss(Level level) {
		int xxs = x;
		int yys = y;
		if(level.getTile(x, y) != Tile.dirt) {
			x = xxs;
			y = yys;
			return true;
		} else {
			return false;
		}
	}

	public boolean findStartPos(Level level) {
		int x;
		int y;
		do {
			x = random.nextInt(level.w);
			y = random.nextInt(level.h);
		} while(level.getTile(x, y) != Tile.grass);

		x = x * 16 + 8;
		y = y * 16 + 8;
		spawnx = y;
		spawny = x;
		return true;
	}

	public void setHome() {
		if(Game.currentLevel == 3) {
			homeSetX = x;
			homeSetY = y;
			canSetHome = true;
			sentFromSetHome = true;
			hasSetHome = true;
			game.setMenu(new InfoMenu());
		} else {
			canSetHome = false;
			sentFromSetHome = true;
			game.setMenu(new InfoMenu());
		}

	}

	public void goHome() {
		if(Game.currentLevel == 3) {
			canGoHome = true;
			sentFromHome = true;
			if(hasSetHome) {
				x = homeSetX;
				y = homeSetY;
				if(ModeMenu.hardcore) {
					hurt(this, 2, attackDir);
				}

				stamina = 0;
				sentFromHome = true;
				game.setMenu(new HomeMenu());
			} else {
				game.setMenu(new HomeMenu());
			}
		} else {
			canGoHome = false;
			hasSetHome = false;
			sentFromHome = true;
			game.setMenu(new HomeMenu());
		}

	}

	public boolean respawn(Level level) {
		while(true) {
			int x = spawnx;
			int y = spawny;
			if(level.getTile(x, y) == Tile.grass && !bedSpawn) {
				x = spawny * 16 + 8;
				y = spawnx * 16 + 8;
				return true;
			}

			if(bedSpawn) {
				x = spawny * 16 + 8;
				y = spawnx * 16 + 8;
				return true;
			}

			findStartPos(level);
		}
	}

	public boolean payStamina(int cost) {
		if(infstamina) {
			return true;
		} else if(cost > stamina) {
			return false;
		} else {
			if(cost < 0) {
				cost = 0;
			}

			stamina -= cost;
			return true;
		}
	}

	public void changeLevel(int dir) {
		game.scheduleLevelChange(dir);
	}

	public int getLightRadius() {
		int r = (int)(3.0D * light);
		if(ModeMenu.creative) {
			r = (int)(12.0D * light);
		}

		if(Game.currentLevel == 5 && !ModeMenu.creative) {
			r = (int)(5.0D * light);
		}

		if(activeItem != null && activeItem instanceof FurnitureItem) {
			int rr = ((FurnitureItem)activeItem).furniture.getLightRadius();
			if(rr > r) {
				r = rr;
			}
		}

		return r;
	}

	protected void die() {
		super.die();
		int lostscore = score / 3;
		score -= lostscore;
		Chest dc = new Chest(true);
		dc.x = x;
		dc.y = y;
		PowerGloveItem pg = new PowerGloveItem();
		dc.inventory = inventory;
		if(activeItem != null) {
			dc.inventory.add(activeItem);
		}

		for(int i = 0; i < inventory.items.size(); ++i) {
			if(((Item)inventory.items.get(i)).matches(pg)) {
				dc.inventory.items.remove((Item)inventory.items.get(i));
			}
		}

		Game.levels[Game.currentLevel].add(dc);
		Sound.playerDeath.play();
	}

	protected void touchedBy(Entity entity) {
		if(!(entity instanceof Player)) {
			entity.touchedBy(this);
		}

	}

	protected void doHurt(int damage, int attackDir) {
		if(!ModeMenu.creative) {
			if(hurtTime > 0 || invulnerableTime > 0) {
				return;
			}

			Sound.playerHurt.play();
			int dmgleft;
			if(shield) {
				if(maxArmor <= 0) {
					if(random.nextInt(2) == 0) {
						damage = 0;
					}

					level.add(new TextParticle("" + damage, x, y, Color.get(-1, 504, 504, 504)));
					health -= damage;
				}

				if(maxArmor > 0) {
					if(random.nextInt(2) == 0) {
						damage = 0;
					}

					level.add(new TextParticle("" + damage, x, y, Color.get(-1, 333, 333, 333)));
					if(damage > maxArmor) {
						dmgleft = damage - maxArmor;
						health -= dmgleft;
						maxArmor = 0;
					} else {
						maxArmor -= damage;
					}
				}
			} else {
				if(maxArmor <= 0) {
					level.add(new TextParticle("" + damage, x, y, Color.get(-1, 504, 504, 504)));
					health -= damage;
				}

				if(maxArmor > 0) {
					level.add(new TextParticle("" + damage, x, y, Color.get(-1, 333, 333, 333)));
					if(damage > maxArmor) {
						dmgleft = damage - maxArmor;
						health -= dmgleft;
						maxArmor = 0;
					} else {
						maxArmor -= damage;
					}
				}
			}

			if(attackDir == 0) {
				yKnockback = 6;
			}

			if(attackDir == 1) {
				yKnockback = -6;
			}

			if(attackDir == 2) {
				xKnockback = -6;
			}

			if(attackDir == 3) {
				xKnockback = 6;
			}

			hurtTime = 10;
			invulnerableTime = 30;
		}

	}

	public void gameWon() {
		level.player.invulnerableTime = 300;
		game.won();
	}
}
